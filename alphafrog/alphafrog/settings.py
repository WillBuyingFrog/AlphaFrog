"""
Django settings for alphafrog project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import json
from django.core.exceptions import ImproperlyConfigured

def get_secrets(setting, index=0):
    with open('settings.json') as f:
        secrets = json.loads(f.read())
    try:
        if setting == 'sql' or setting == 'redis':
            return secrets[setting][index]
        else:
            return secrets[setting]
    except KeyError:
        error_msg = "Set the {0} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(6uuacz!8oej(7okcwur4qvtj(mwe^=bqs(-svlb9p9eo9sy#u"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "domestic",
    "alpha_record"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "alphafrog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "alphafrog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

ALPHAFROG_DATABASE_INDEX = 1

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_secrets('sql', index=ALPHAFROG_DATABASE_INDEX)['db_name'],
        'USER': get_secrets('sql', index=ALPHAFROG_DATABASE_INDEX)['user'],
        'PASSWORD': get_secrets('sql', index=ALPHAFROG_DATABASE_INDEX)['password'],
        'HOST': get_secrets('sql', index=ALPHAFROG_DATABASE_INDEX)['host'],
        'PORT': get_secrets('sql', index=ALPHAFROG_DATABASE_INDEX)['port'],
    },
    'sqlite3': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
    }
}

DATABASE_ROUTERS = ['db_router.DatabaseRouter']


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Celery Settings


CELERY_BRK_HOST = get_secrets('redis', index=0)['host']
CELERY_BRK_PORT = get_secrets('redis', index=0)['port']
CELERY_BRK_PASS = get_secrets('redis', index=0)['password']
CELERY_BROKER_URL = f"redis://:{CELERY_BRK_PASS}@{CELERY_BRK_HOST}:{CELERY_BRK_PORT}/0"
CELERY_RESULT_BACKEND = f"redis://:{CELERY_BRK_PASS}@{CELERY_BRK_HOST}:{CELERY_BRK_PORT}/1"
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  # 可选，设置消息可见性超时时间
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


# AlphaFrog custom settings

TUSHARE_TOKEN = get_secrets('tushare.token')

PRIMARY_VLM = get_secrets('llms')['primary_vlm']
FIREWORKS_API_KEY = get_secrets('llms')['fireworks.api_key']
OPENROUTER_API_KEY = get_secrets('llms')['openrouter.api_key']
DASHSCOPE_API_KEY = get_secrets('llms')['dashscope.api_key']